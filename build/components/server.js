"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = __importStar(require("path"));
var fs_extra_1 = require("fs-extra");
var fs = __importStar(require("fs"));
var util_1 = require("util");
var lodash_1 = require("lodash");
var writeFile = util_1.promisify(fs.writeFile);
var readFile = util_1.promisify(fs.readFile);
var access = util_1.promisify(fs.access);
var onlyHandleTS = function (_a) {
    var language = _a.language;
    if (language !== "typescript") {
        throw new Error("Cannot handle any other language other than TS for server generator");
    }
};
var methodMappingTemplate = lodash_1.template("// Code generated by @open-rpc/generator DO NOT EDIT or ur gonna have a bad tiem\nimport { MethodMapping } from \"@open-rpc/server-js/build/router\";\n\nimport methods from \"./methods\";\n\nexport const methodMapping: MethodMapping = {\n<% openrpcDocument.methods.forEach(({ name }) => { %>  <%= name %>: methods.<%= name %>,\n<% }); %>};\n\nexport default methodMapping;\n");
var generatedTypingsTemplate = lodash_1.template("<%= methodTypings.toString(\"typescript\") %>");
var hooks = {
    afterCopyStatic: [
        function (dest, frm, component, openrpcDocument) { return __awaiter(void 0, void 0, void 0, function () {
            var destPath, tmplPath, tmplPkgStr, tmplPkg, currPkgStr, currPkg, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onlyHandleTS(component);
                        destPath = path.join(dest, "package.json");
                        tmplPath = path.join(dest, "_package.json");
                        return [4 /*yield*/, readFile(tmplPath, "utf8")];
                    case 1:
                        tmplPkgStr = _a.sent();
                        tmplPkg = JSON.parse(tmplPkgStr);
                        tmplPkg.name = component.name || openrpcDocument.info.title;
                        tmplPkg.version = openrpcDocument.info.version;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, readFile(destPath, "utf8")];
                    case 3:
                        currPkgStr = _a.sent();
                        currPkg = JSON.parse(currPkgStr);
                        tmplPkg = __assign(__assign(__assign({}, currPkg), tmplPkg), { dependencies: __assign(__assign({}, currPkg.dependencies), tmplPkg.dependencies), devDependencies: __assign(__assign({}, currPkg.devDependencies), tmplPkg.devDependencies) });
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, writeFile(destPath, JSON.stringify(tmplPkg, undefined, "  "))];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, fs_extra_1.remove(tmplPath)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); },
    ],
    afterCompileTemplate: [
        function (dest, frm, component, openrpcDocument, typings) { return __awaiter(void 0, void 0, void 0, function () {
            var methodsFolder, _i, _a, method, methodFileName, functionAliasName, params, functionParams, newFunctionInterface, exists, e_2, codeToWrite, existingMethod, methodRegExp, returnVal, example, exRes, imports, methodMappingStr, defaultExportStr;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        onlyHandleTS(component);
                        methodsFolder = dest + "/src/methods/";
                        return [4 /*yield*/, fs_extra_1.ensureDir(methodsFolder)];
                    case 1:
                        _b.sent();
                        _i = 0, _a = openrpcDocument.methods;
                        _b.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 12];
                        method = _a[_i];
                        methodFileName = methodsFolder + "/" + method.name + ".ts";
                        functionAliasName = typings.getTypingNames("typescript", method).method;
                        params = method.params;
                        functionParams = params.map(function (_a) {
                            var name = _a.name;
                            return name;
                        }).join(", ");
                        newFunctionInterface = "const " + method.name + ": " + functionAliasName + " = (" + functionParams + ") => {";
                        exists = true;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, access(methodFileName, fs.constants.F_OK)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_2 = _b.sent();
                        exists = false;
                        return [3 /*break*/, 6];
                    case 6:
                        codeToWrite = "";
                        if (!exists) return [3 /*break*/, 8];
                        return [4 /*yield*/, readFile(methodFileName, "utf8")];
                    case 7:
                        existingMethod = _b.sent();
                        methodRegExp = new RegExp("const " + method.name + ": " + functionAliasName + " = (.*) =>", "gm");
                        existingMethod.replace(methodRegExp, newFunctionInterface);
                        codeToWrite = existingMethod;
                        return [3 /*break*/, 9];
                    case 8:
                        returnVal = "";
                        if (method.examples) {
                            example = method.examples[0];
                            exRes = example.result;
                            returnVal = exRes.value;
                        }
                        codeToWrite = [
                            "import { " + functionAliasName + " } from \"../generated-typings\";",
                            "",
                            newFunctionInterface,
                            "  return Promise.resolve(" + returnVal + ");",
                            "};",
                            "",
                            "export default " + method.name + ";",
                            "",
                        ].join("\n");
                        _b.label = 9;
                    case 9: return [4 /*yield*/, writeFile(methodFileName, codeToWrite, "utf8")];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11:
                        _i++;
                        return [3 /*break*/, 2];
                    case 12:
                        imports = openrpcDocument.methods.map(function (_a) {
                            var name = _a.name;
                            return "import " + name + " from \"./" + name + "\";";
                        });
                        methodMappingStr = __spreadArrays([
                            "const methods = {"
                        ], openrpcDocument.methods.map(function (_a) {
                            var name = _a.name;
                            return "  " + name + ",";
                        }), [
                            "};",
                        ]);
                        defaultExportStr = "export default methods;";
                        return [4 /*yield*/, writeFile(methodsFolder + "/index.ts", __spreadArrays(imports, [""], methodMappingStr, ["", defaultExportStr, ""]).join("\n"), "utf8")];
                    case 13:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); },
    ],
    templateFiles: {
        typescript: [
            {
                path: "src/generated-method-mapping.ts",
                template: methodMappingTemplate,
            },
            {
                path: "src/generated-typings.ts",
                template: generatedTypingsTemplate,
            },
        ],
    },
};
exports.default = hooks;
//# sourceMappingURL=server.js.map